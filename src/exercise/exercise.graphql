type Query {
  searchExercises(query: ExerciseSearchQuery): ExerciseSearchResult!
  exercises(take: Int!, skip: Int!): [Exercise!]!
  exercisesCount: Int!
  exercise(id: ID!): Exercise
}

type Mutation {
  createExercise(input: ExerciseInput!): Exercise!
  cloneExerciseToNew(id: ID!, contributors: [ID!]): Exercise!
  updateExercise(id: ID!, input: ExerciseUpdateInput!): Exercise!
}

type ExerciseSearchResult {
  exercises: [Exercise!]!
  totalCount: Int!
}

input ExerciseSearchQuery {
  skip: Int!
  take: Int!
  queryStr: String
  isCompetitionFinal: Boolean
  difficulty: [ExerciseDifficultyRange!]
  exerciseCheck: ExerciseCheckFilter
  orderBy: String
  orderDirection: OrderDirection
  includeTags: [ID!]
  excludeTags: [ID!]
}

enum ExerciseCheckFilter {
  NEEDS_TO_BE_CHECKED
  GOOD
  CHANGE_REQUIRED
  TO_DELETE
}

enum OrderDirection {
  ASC
  DESC
}

input ExerciseDifficultyRange {
  ageGroup: ExerciseAgeGroup!
  min: Int
  max: Int
}

input ExerciseInput {
  tags: [ID]!
  status: ExerciseStatus! #Authorization based, who can create what
  alert: ExerciseAlertInput
  description: String! #text
  exerciseImage: String
  solution: String!
  solutionImage: String
  solveIdea: String
  solveIdeaImage: String
  helpingQuestions: [String!]!
  solutionOptions: [String!]!
  source: String
  difficulty: [ExerciseDifficultyInput!]!
  contributors: [ID!]
  sameLogicGroup: ID
  isCompetitionFinal: Boolean
}

# Basically the same as ExerciseInput, but all fields are nullable
input ExerciseUpdateInput {
  tags: [ID!]
  status: ExerciseStatus #Authorization based, who can create what
  alert: ExerciseAlertInput
  description: String #text
  exerciseImage: String
  solution: String
  solutionImage: String
  solveIdea: String
  solveIdeaImage: String
  helpingQuestions: [String!]
  solutionOptions: [String!]
  source: String
  difficulty: [ExerciseDifficultyInput!]
  contributors: [ID!]
  sameLogicGroup: ID
  isCompetitionFinal: Boolean

  #New fields that are not present in create
  comment: String
}

enum ExerciseStatus {
  DRAFT #Mentve, in progress
  CREATED
  APPROVED # Ellenőrzött
  DELETED # Purgált
}

type Exercise {
  id: ID!
  originalId: String
  tags: [Tag!]!
  status: ExerciseStatus! #Authorization based, who can create what
  alert: ExerciseAlert
  description: String! #text
  exerciseImage: Image
  solution: String!
  solutionImage: Image
  solveIdea: String
  solveIdeaImage: Image
  helpingQuestions: [String!]!
  solutionOptions: [String!]!
  source: String
  difficulty: [ExerciseDifficulty!]!
  history: [ExerciseHistory!]!
  sameLogicExerciseGroup: SameLogicExerciseGroup
  checks: [ExerciseCheck!]! #User and TimeStamp
  comments: [ExerciseComment!]!
  isCompetitionFinal: Boolean
  createdBy: User!
  contributors: [User!]!
  createdAt: String!
  updatedAt: String!
}

type ExerciseAlert {
  severity: AlertSeverity!
  description: String!
}

input ExerciseAlertInput {
  severity: AlertSeverity!
  description: String!
}

enum AlertSeverity {
  SUCCESS
  INFO
  WARNING
  ERROR
}

type Tag {
  id: ID!
  parent: Tag
  children: [Tag!]!
  exercises: [Exercise!]!
  name: String!
}

type ExerciseDifficulty {
  ageGroup: ExerciseAgeGroup!
  difficulty: Int!
}

input ExerciseDifficultyInput {
  ageGroup: ExerciseAgeGroup!
  difficulty: Int!
}

enum ExerciseAgeGroup {
  KOALA
  MEDVEBOCS
  KISMEDVE
  NAGYMEDVE
  JEGESMEDVE
}
