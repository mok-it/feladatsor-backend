type Query {
    searchExercises(query: ExerciseSearchQuery): [Exercise!]!
    exercises(take: Int!, skip: Int!): [Exercise!]!
    exercisesCount: Int!
    exercise(id: ID!): Exercise
}

input ExerciseSearchQuery {
    queryStr: String
    difficulty: [ExerciseDifficultyRange!]
    tags: [ID!]
    excludeTags: [ID!]
}

input ExerciseDifficultyRange {
    ageGroup: ExerciseAgeGroup!
    min: Int
    max: Int
}

type Mutation {
    createExercise(input: ExerciseInput!): Exercise!
}

input ExerciseInput {
    tags: [ID]!
    status: ExerciseStatus! #Authorization based, who can create what
    description: String! #text
    exerciseImage: String
    solution: String!
    solutionImage: String
    solveIdea: String
    solveIdeaImage: String
    elaboration: String
    elaborationImage: String
    helpingQuestions: [String!]!
    solutionOptions: [String!]!
    source: String
    difficulty: [ExerciseDifficultyInput!]!
    alternativeDifficultyParent: ID
    sameLogicParent: ID
    isCompetitionFinal: Boolean
}

enum ExerciseStatus {
    DRAFT   #Mentve, in progress
    CREATED
    APPROVED # Ellenőrzött
    DELETED # Purgált
}

type Exercise {
    id: ID!
    tags: [Tag!]!
    status: ExerciseStatus! #Authorization based, who can create what
    description: String! #text
    exerciseImage: String
    solution: String!
    solveIdea: String
    elaboration: String
    elaborationImage: String
    helpingQuestions: [String!]!
    solutionOptions: [String!]!
    source: String
    difficulty: [ExerciseDifficulty!]!
    history: [ExerciseHistory!]!
    alternativeDifficultyExercises: [Exercise!]! #[Hasonló] Difficulty is different
    sameLogicExercises: [Exercise!]! #[Átadott] Logic is the same, everything is different
    checks: [ExerciseCheck!]! #User and TimeStamp
    comments: [ExerciseComment!]!
    isCompetitionFinal: Boolean
    createdBy: User!
    createdAt: String!
    updatedAt: String!
}

type ExerciseComment {
    id: ID!
    user: User!
    comment: String!
    createdAt: String!
    updatedAt: String!
}

type Tag {
    id: ID!
    parent: Tag
    children: [Tag!]!
    exercises: [Exercise!]!
    name: String!
}

type ExerciseDifficulty {
    ageGroup: ExerciseAgeGroup!
    difficulty: Int!
}

input ExerciseDifficultyInput {
    ageGroup: ExerciseAgeGroup!
    difficulty: Int!
}

enum ExerciseAgeGroup {
    KOALA
    MEDVEBOCS
    KISMEDVE
    NAGYMEDVE
    JEGESMEDVE
}

type ExerciseHistory {
    id: ID!
    exercise: Exercise!
    #TODO
}