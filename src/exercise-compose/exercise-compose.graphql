type Query {
  exerciseSheets: [ExerciseSheet!]!
  exerciseSheet(id: ID!): ExerciseSheet
}

type Mutation {
  createExerciseSheet(sheetData: ExerciseSheetInput!): ExerciseSheet!
  updateExerciseSheet(
    id: ID!
    sheetData: UpdateExerciseSheetInput!
  ): ExerciseSheet!
  deleteExerciseSheet(id: ID!): Boolean!
}

input ExerciseSheetInput {
  name: String!
  sheetItems: [ExerciseSheetItemInput!]
}

input UpdateExerciseSheetInput {
  name: String
  status: ExerciseSheetStatus
  sheetItems: [ExerciseSheetItemInput!]
  talonItems: [OrderedExerciseInput!]
}

input ExerciseSheetItemInput {
  ageGroup: ExerciseAgeGroup!
  level: Int!
  exercises: [OrderedExerciseInput!]!
}

input OrderedExerciseInput {
  exerciseID: ID!
  order: Int!
}

enum ExerciseSheetStatus {
  DRAFT # Mentve, in progress
  CREATED
  APPROVED # Ellenőrzött
  DELETED # Purgált
}

type ExerciseSheet {
  id: ID!
  name: String!
  status: ExerciseSheetStatus! 
  sheetItems: [ExerciseSheetItem!]!
  talonItems: [OrderedExercise!]!
  createdBy: User!
  createdAt: String!
  updatedAt: String!
}

type ExerciseSheetItem {
  id: ID!
  ageGroup: ExerciseAgeGroup!
  level: Int!
  exercises: [OrderedExercise!]!
}

type OrderedExercise {
  order: Int!
  exercise: Exercise!
}
