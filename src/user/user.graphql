type Query {
  users: [User!]!
  user(id: ID!): User
}

type Mutation {
  register(data: UserRegisterInput!): User!
  changePermissions(userId: ID!, permissions: [Role!]!): User!
  updateUser(data: UserUpdateInput!, id: String): User!
}

type LoginResponse {
  token: String!
  user: User!
}

input UserRegisterInput {
  email: String!
  password: String!
  name: String!
  userName: String!
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  userName: String
  customAvatarId: String
}

enum Role {
  ADMIN
  USER
}

type User {
  id: ID!
  email: String!
  name: String!
  userName: String!
  createdAt: String!
  updatedAt: String!
  exercises: [Exercise!]!
  roles: [Role!]!
  avatarUrl: String
}
