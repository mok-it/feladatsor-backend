type Query {
  users: [User!]!
  user(id: ID!): User
  me: User
}

type Mutation {
  register(data: UserRegisterInput!): User!
  changePermissions(userId: ID!, permissions: [Role!]!): User!
  "Update by id, or if not provided, use the user from the JWT token"
  updateUser(data: UserUpdateInput!, id: ID): User!
}

type LoginResponse {
  token: String!
  user: User!
}

input UserRegisterInput {
  email: String!
  password: String!
  name: String!
  userName: String!
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  userName: String
  customAvatarId: String
}

enum Role {
  "Is able to submit new Exercises, and list his own"
  USER
  "Able to list all exercises"
  LIST_EXERCISES
  "Able to check an exercise"
  CHECK_EXERCISE
  "Able to clone an exercise"
  CLONE_EXERCISE
  "Able to change the exercise's state to Deleted or Done"
  FINALIZE_EXERCISE
  "Ability to view and manipulate exercise sheets"
  EXERCISE_SHEET
  "Can add comments to exercise sheets"
  PROOFREAD_EXERCISE_SHEET
  "Should bypass any other role check, can do anything"
  ADMIN
}

type User {
  id: ID!
  email: String!
  name: String!
  userName: String!
  createdAt: String!
  updatedAt: String!
  exercises(skip: Int = 0, take: Int = 20): [Exercise!]!
  roles: [Role!]!
  stats: UserStats!
  comments: [ExerciseComment!]!
  avatarUrl: String
}

type UserStats {
  totalExerciseCount: Int!
  checkedExerciseCount: Int!
  contributionCalendar: ContributionCalendar!
}
