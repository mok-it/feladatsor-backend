name: Build and deploy Docker image

on:
  push:
    tags:
      - v*
    branches:
      - main

jobs:
  push-to-dockerhub:
    runs-on: ubuntu-latest
    name: Build and push ${{ github.repository }} to DockerHub
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: kosbalint/be-feladatsor
          flavor: |
            latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            "GENERATE_SOURCEMAP=false"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-cloud-run:
    runs-on: ubuntu-latest
    name: Deploy to Google Cloud Run
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCR_JSON_KEY }}

      - name: Configure Docker to use gcloud as a credential helper
        run: gcloud auth configure-docker

      - name: Build Docker image for GCP
        run: |
          docker build -t gcr.io/${{ vars.GCP_PROJECT_ID }}/be-feladatsor:latest .

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/${{ vars.GCP_PROJECT_ID }}/be-feladatsor:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy be-feladatsor-dev \
            --image gcr.io/${{ vars.GCP_PROJECT_ID }}/be-feladatsor:latest \
            --platform managed \
            --region ${{ vars.GCP_REGION }} \
            --allow-unauthenticated \
            --add-volume name=file-storage,type=cloud-storage,bucket=${{ vars.GCS_BUCKET }} \
            --add-volume-mount volume=file-storage,mount-path=/code/data \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL_DEV }},JWT_SECRET=${{ secrets.JWT_SECRET_DEV }},PUBLIC_HOST=${{ vars.PUBLIC_HOST_DEV }},FIREBASE_VALIDATE_URL=${{ vars.FIREBASE_VALIDATE_URL }},FILE_STORAGE_FOLDER=/code/data
            --port 3000