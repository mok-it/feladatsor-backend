// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseStatus {
  DRAFT
  CREATED
  APPROVED
  DELETED
}

model ExerciseTag {
  id                  String        @id @default(uuid())
  parentExerciseTagId String?
  parentTag           ExerciseTag?  @relation("parentExercises", fields: [parentExerciseTagId], references: [id])
  children            ExerciseTag[] @relation("parentExercises")
  exercises           Exercise[]
  name                String        @unique
}

model Exercise {
  id                              String               @id @default(uuid())
  tags                            ExerciseTag[]
  status                          ExerciseStatus
  description                     String
  exerciseImageId                 String?
  solution                        String
  solutionImageId                 String?
  solveIdea                       String?
  solveIdeaImageId                String?
  helpingQuestions                String[]
  solutionOptions                 String[]
  source                          String?
  difficulty                      ExerciseDifficulty[]
  history                         ExerciseHistory[]
  alternativeDifficultyExerciseId String?
  alternativeDifficultyExercise   Exercise?            @relation("alternativeDifficultyExercises", fields: [alternativeDifficultyExerciseId], references: [id])
  alternativeDifficultyExercises  Exercise[]           @relation("alternativeDifficultyExercises")
  sameLogicExerciseId             String?
  sameLogicExercise               Exercise?            @relation("sameLogicExercises", fields: [sameLogicExerciseId], references: [id])
  sameLogicExercises              Exercise[]           @relation("sameLogicExercises")
  checks                          ExerciseCheck[]
  comments                        ExerciseComment[]
  isCompetitionFinal              Boolean              @default(false)
  createdBy                       User                 @relation(fields: [createdById], references: [id])
  createdById                     String
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @default(now()) @updatedAt
}

model ExerciseComment {
  id         String   @id @default(uuid())
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ExerciseDifficulty {
  id         String   @id @default(uuid())
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  ageGroup   AgeGroup
  difficulty Int
}

enum AgeGroup {
  KOALA
  MEDVEBOCS
  KISMEDVE
  NAGYMEDVE
  JEGESMEDVE
}

enum Role {
  ADMIN
  USER
}

model User {
  id              String            @id @default(uuid())
  avatarUrl       String?
  name            String
  userName        String            @unique
  email           String
  password        String?
  firebaseId      String?
  roles           Role[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  exercises       Exercise[]
  ExerciseCheck   ExerciseCheck[]
  ExerciseComment ExerciseComment[]
  ExerciseHistory ExerciseHistory[]
}

model ExerciseCheck {
  id         String            @id @default(uuid())
  exercise   Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseId String
  user       User              @relation(fields: [userId], references: [id])
  userId     String
  type       ExerciseCheckType
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now()) @updatedAt
}

model ExerciseHistory {
  id         String   @id @default(uuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  field      String
  oldValue   String
  newValue   String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum ExerciseCheckType {
  GOOD
  CHANGE_REQUIRED
  TO_DELETE
}

model Image {
  id               String @id @default(uuid())
  originalName     String
  originalMimeType String
  originalSize     BigInt
  transformedSize  BigInt
}
