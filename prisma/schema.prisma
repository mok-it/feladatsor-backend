// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ExerciseStatus {
  DRAFT
  CREATED
  APPROVED
  DELETED
}

model ExerciseTag {
  id                  String        @id @default(uuid())
  parentExerciseTagId String?
  parentTag           ExerciseTag?  @relation("parentExercises", fields: [parentExerciseTagId], references: [id])
  children            ExerciseTag[] @relation("parentExercises")
  exercises           Exercise[]
  name                String        @unique
}

enum AggregatedCheckStatus {
  NEEDS_TO_BE_CHECKED
  GOOD
  CHANGE_REQUIRED
  TO_DELETE
}

model Exercise {
  id                       String                        @id @default(uuid())
  originalId               String?
  tags                     ExerciseTag[]
  status                   ExerciseStatus
  alertSeverty             ExerciseAlertSeverity?
  alertDescription         String?
  description              String
  exerciseImageId          String?
  solution                 String
  solutionImageId          String?
  solveIdea                String?
  solveIdeaImageId         String?
  helpingQuestions         String[]
  solutionOptions          String[]
  source                   String?
  difficulty               ExerciseDifficulty[]
  history                  ExerciseHistory[]
  sameLogicExerciseGroup   ExerciseGroupSameLogic?       @relation(fields: [exerciseGroupSameLogicId], references: [id])
  exerciseGroupSameLogicId String?
  checks                   ExerciseCheck[]
  aggregatedCheckStatus    AggregatedCheckStatus         @default(NEEDS_TO_BE_CHECKED)
  comments                 ExerciseComment[]
  isCompetitionFinal       Boolean                       @default(false)
  createdBy                User                          @relation(fields: [createdById], references: [id])
  createdById              String
  contributors             User[]                        @relation("ExerciseContribution")
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @default(now()) @updatedAt
  isImported               Boolean                       @default(false)
  importedAt               DateTime?
  ExerciseSheetItems       ExerciseOnExerciseSheetItem[]
  ExerciseSheet            ExerciseSheet[]
  Talon                    TalonItem[]
}

enum ExerciseAlertSeverity {
  SUCCESS
  INFO
  WARNING
  ERROR
}

model ExerciseGroupSameLogic {
  id          String     @id() @default(uuid())
  description String?
  exercises   Exercise[]
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

model ExerciseComment {
  id           String   @id @default(uuid())
  exerciseId   String
  exercise     Exercise @relation(fields: [exerciseId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  contributors User[]   @relation("CommentContribution")
  comment      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model ExerciseDifficulty {
  id         String   @id @default(uuid())
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  ageGroup   AgeGroup
  difficulty Int
}

enum AgeGroup {
  KOALA
  MEDVEBOCS
  KISMEDVE
  NAGYMEDVE
  JEGESMEDVE
}

enum Role {
  USER // -> Is able to submit new Exercises, and list his own
  LIST_EXERCISES //-> Able to list all exercises
  CHECK_EXERCISE //-> Able to check an exercise
  CLONE_EXERCISE //-> Able to clone an exercise
  FINALIZE_EXERCISE //-> Able to change the exercise's state to Deleted or Done
  EXERCISE_SHEET //-> Ability to view and manipulate exercise sheets
  PROOFREAD_EXERCISE_SHEET //-> Can add comments to exercise sheets

  ADMIN //-> Should bypass any other role check, can do anything
}

model User {
  id                        String                   @id @default(uuid())
  avatarUrl                 String?
  customAvatarId            String?
  name                      String
  userName                  String                   @unique
  email                     String
  password                  String?
  firebaseId                String?
  roles                     Role[]
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @default(now())
  exercises                 Exercise[]
  ExerciseCheck             ExerciseCheck[]
  ExerciseComment           ExerciseComment[]
  ExerciseHistory           ExerciseHistory[]
  ExerciseGroupSameLogic    ExerciseGroupSameLogic[]
  ExerciseSheet             ExerciseSheet[]
  contributedExercises      Exercise[]               @relation("ExerciseContribution")
  contributedExerciseChecks ExerciseCheck[]          @relation("ExerciseCheckContribution")
  contributedComment        ExerciseComment[]        @relation("CommentContribution")
  ExcelExport               ExcelExport[]
}

model ExerciseCheck {
  id           String            @id @default(uuid())
  exercise     Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseId   String
  user         User              @relation(fields: [userId], references: [id])
  userId       String
  contributors User[]            @relation("ExerciseCheckContribution")
  type         ExerciseCheckType
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt

  @@unique([exerciseId, userId])
}

model ExerciseHistory {
  id         String   @id @default(uuid())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  field      String
  oldValue   String
  newValue   String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

enum ExerciseCheckType {
  GOOD
  CHANGE_REQUIRED
  TO_DELETE
}

model Image {
  id               String @id @default(uuid())
  originalName     String
  originalMimeType String
  originalSize     BigInt
  transformedSize  BigInt
}

model ExerciseSheet {
  id             String              @id @default(uuid())
  name           String
  sheetItems     ExerciseSheetItem[]
  talonExercises TalonItem[]
  createdById    String
  createdBy      User                @relation(fields: [createdById], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt
  Exercise       Exercise?           @relation(fields: [exerciseId], references: [id])
  exerciseId     String?
}

model ExerciseSheetItem {
  id              String                        @id @default(uuid())
  ageGroup        AgeGroup
  level           Int
  exercises       ExerciseOnExerciseSheetItem[]
  ExerciseSheet   ExerciseSheet?                @relation(fields: [exerciseSheetId], references: [id])
  exerciseSheetId String?
}

model ExerciseOnExerciseSheetItem {
  id                  String            @id @default(uuid())
  exerciseId          String
  exercise            Exercise          @relation(fields: [exerciseId], references: [id])
  exerciseSheetItemId String
  exerciseSheetItem   ExerciseSheetItem @relation(fields: [exerciseSheetItemId], references: [id])
  order               Int
}

model TalonItem {
  exerciseId      String
  exercise        Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseSheetId String
  exerciseSheet   ExerciseSheet @relation(fields: [exerciseSheetId], references: [id])
  order           Int

  @@id([exerciseId, exerciseSheetId])
}

model Developer {
  id    String @id @default(uuid())
  name  String
  count Int
}

model ExcelExport {
  id           String   @id @default(uuid())
  fileName     String
  fileSize     BigInt
  filePath     String
  exportedBy   User     @relation(fields: [exportedById], references: [id])
  exportedById String
  createdAt    DateTime @default(now())
}
